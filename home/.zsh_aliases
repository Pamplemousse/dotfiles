# GENERAL
alias edit="subl -w"
alias lla="ls -alh"
alias duh="du -h . | grep '\./[^/]*$'"
alias myip="/sbin/ifconfig | grep 'inet ' | awk '{ print $2}'"
alias myssh="echo -n `cat ~/.ssh/id_rsa.pub` | xclip -selection clipboard"
alias sshc="edit ~/.ssh/config"
alias gemc="edit ~/.gemrc"

# CURL
alias get="curl -O"
alias workon="echo \`pwd\` > $HOME/.WORK_ON"
alias workoff="rm $HOME/.WORK_ON"

# ZSH
alias npm="nocorrect npm"
alias grunt="nocorrect grunt"
alias guard="nocorrect guard"
alias rspec="nocorrect rspec"
alias guard="guard --no-bundler-warning"
alias reload="echo \`pwd\` > $HOME/.RELOAD && source ~/.zshrc"

alias zshc="edit $DOTFILES/.zshrc"
alias zsha="edit $DOTFILES/.zsh_aliases"
alias gitc="edit $DOTFILES/.gitconfig"



# RAILS
alias be="bundle exec"
alias rdbc="rake db:create"
alias rdbm="rake db:migrate"
alias rdbtp="rake db:test:prepare"
alias rdbs="rake db:seed"
alias dbreset="rdbd && rdbc && rdbm && rdbtp"

function rails_init () {
  if [ -z "$1" ]; then
    not_ok 'rails_init: missing app name argument'
    return -1
  fi

  ( echo -n "Initializing folder and env..."
  mkdir $1 && cd $1 && rbenv_init &&
  gem install bundler > /dev/null &&
  gem install rails > /dev/null &&
  touch .env &&
  ok || not_ok ) &&

  cd $1 &&

  ( echo -n "Generate rails app and repo..."
  rails new . > /dev/null &&
  git init . > /dev/null &&
  gi rails,osx > .gitignore &&
  ok || not_ok ) &&

  ( echo -n "Customize app and Gemfile....."
  echo "

# Always ignore important files
/config/database.yml
/.env
" >> .gitignore &&
  dbyml_init config/database.yml `whoami` &&
  dbyml_init config/database.yml.tmpl &&
  mv README.rdoc README.md &&
  subl . &&
  edit Gemfile &&
  ok || not_ok ) &&

  ( echo -n "Initialize bundle and DB....."
  bundle > /dev/null &&
  rake db:create > /dev/null &&
  ok || not_ok ) &&

  echo -n "Finalization..................."
  ga . && gc -m 'Initial commit' > /dev/null &&
  ok || not_ok

  workon
}



# GIT
alias gll="git log --pretty=format:'%C(yellow)%h %C(cyan)%ad %C(reset)%s %C(green)[%cn]' --decorate --date=short --graph"
alias gd="git diff --ignore-space-at-eol -b -w --ignore-blank-lines"
alias gds="git diff --staged"
alias gap="git add -p"
alias gcam="gc -a -m"
alias gpl="git pull"

# Fix oh-my-zsh's git plugin conflict
if type gclean > /dev/null; then
  unalias gclean
fi

function gclean () {
   ggpull &&
   git remote prune origin &&
   git fetch &&
   git branch -a --merged | grep -v -E 'master|stable|staging|pull|'`git rev-parse --abbrev-ref HEAD` | sed 's/^/git branch -d/' | sed 's/branch -d remotes\/origin\//push origin :/'
 }

function gi() {
  if [ -z "$1" ]; then
    not_ok 'gitignore: you must provide operating system, programming language, or IDE keywords'
  else
    curl --silent http://www.gitignore.io/api/$1
  fi
}



# HEROKU

alias he="heroku"
alias hew="watch heroku ps --app"
alias hrake="heroku run rake"

function hedumpdb () {
  if [ -z "$1" ]; then
    not_ok 'hedumpdb: missing required argument app name'
  else
    heroku pgbackups:capture --expire --app $1
    now=`date +%Y-%m-%d`
    backup_url=`heroku pgbackups:url --app $1`
    ok $backup_url
    curl -o $DUMPS_FOLDER/$1_$now.dump $backup_url
  fi
}

function deploy () {
  if [ -z "$1" ]; then
    echo 'deploy: missing required branch'
  elif [ -z "$2" ]; then
    echo 'deploy: missing required app'
  else
    git checkout $1 &&
    git pull origin $1 &&
    heroku maintenance:on --app $2 &&
    git push $2 $1:master &&
    heroku run rake db:migrate --app $2 &&
    heroku maintenance:off --app $2 &&
    heroku open --app $2
  fi
}

function update () {
  # Upgrade heroku toolbelt
  echo -n "Heroku....." &&
  heroku update > /dev/null &&
  ok || not_ok

  # Annnd reload!
  echo "Reload.....\n" &&
  reload
}



# STUFF

alias redisd="redis-server /usr/local/etc/redis.conf"
alias redis="redis-cli"
alias dbrestore="pg_restore --verbose --clean --no-acl --no-owner -d"

alias optimg="open -a ImageOptim.app"

# Custom search
search () {
  for i in "$@"; do
    ( find -iname "*$i*" | grep -i "$i" --color=auto ) 2> /dev/null;
  done
}

# Completion on ssh config's hosts
h=()
if [[ -r ~/.ssh/config ]]; then
  h=($h ${${${(@M)${(f)"$(cat ~/.ssh/config)"}:#Host *}#Host }:#*[*?]*})
fi
# if [[ -r ~/.ssh/known_hosts ]]; then
#   h=($h ${${${(f)"$(cat ~/.ssh/known_hosts{,2} || true)"}%%\ *}%%,*}) 2>/dev/null
# fi
if [[ $#h -gt 0 ]]; then
  zstyle ':completion:*:ssh:*' hosts $h
  zstyle ':completion:*:slogin:*' hosts $h
fi

function dbdump () {
  if [ -z "$1" ]; then
    not_ok 'dumpdb: missing required argument database name'
  else
    if [ -z "$2" ]; then
      not_ok 'dumpdb: missing required argument dump file'
    else
      pg_dump -Fc $1 > $2_`date +%Y-%m-%d`.dump
    fi
  fi
}

function repeat() {
    while [ $(( $1 -= 1 )) -ge 0 ]; do
        "$@"
    done
}

function ok() {
  if [ -z "$1" ]; then
    echo -e "\033[32mOK\033[0m"
  else
    echo -e "\033[32m$1\033[0m"
  fi
}

function not_ok() {
  if [ -z "$1" ]; then
    echo -e "\033[31mNOT OK\033[0m"
  else
    echo -e "\033[31m$1\033[0m"
  fi
}

function save () {
  sed -i.bak '' "$@"
}
